@page "/counter"
@inject JSInterop.Services.ILocalStorage localStorage
@using Microsoft.AspNetCore.Components

<h1>Counter</h1>

<p>Current count: @CurrentCount</p>

<div>
  <input @ref="inputElement" @bind="@CurrentCount" />
</div>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
  private int currentCount = 0;

  public int CurrentCount
  {
    get => currentCount;
    set
    {
      if (currentCount != value)
      {
        currentCount = value;
        localStorage.SetProperty<int>(nameof(CurrentCount), currentCount);
      }
    }
  }

  private void IncrementCount()
  {
    CurrentCount++;
  }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      await localStorage.Init();
      await localStorage.WatchAsync(this);

      int c = await localStorage.GetProperty<int>(nameof(CurrentCount));
      currentCount = c;
    }
    catch { }
  }

  private ElementReference inputElement = default!;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await inputElement.FocusAsync();
    }
  }

  [JSInvokable]
  public async Task UpdateCounter()
  {
    int c = await localStorage.GetProperty<int>(nameof(CurrentCount));
    currentCount = c;
    this.StateHasChanged();
  }

  [JSInvokable]
  public static Task<string> GetLocalTime()
  => Task<string>.FromResult(DateTime.UtcNow.ToLongTimeString());
}
