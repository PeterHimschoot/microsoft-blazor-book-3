@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">
  Current count:
  <span class="@BackgroundColor">
    @currentCount
  </span>
</p>

<p>
  @*  <input type="number"
    @bind="@increment"
    @onkeypress="KeyHandler"
    @onkeypress:preventDefault="@shouldPreventDefault" />
  *@
  @*  <input type="number"
    @bind="@increment"
    @onkeypress="KeyHandler"
    @onkeypress:preventDefault />
  *@
  <input type="number" @bind="@increment" @bind:event="oninput" />

</p>

@* Using the longer syntax *@
@*<input type="number"
  value="@increment"
  @onchange="@((ChangeEventArgs e)
  => increment = int.Parse($"{e.Value}"))" />
*@

@*<div style="width: 400px; height: 400px; background: yellow"
  @onmousemove="OuterMouseMove">
  @outerPos
  <div style="width: 300px; height: 300px; background: green; margin:50px"
  @onmousemove="InnerMouseMove"
  @onmousemove:stopPropagation>
  @innerPos
  </div>
  </div>
  <br />*@

@*<input @bind="@Today" @bind:format="yyyy-MM-dd" />
*@

<button class="btn btn-primary"
        disabled="@(currentCount > 10)"
        @onclick="IncrementCount">
  Click me
</button>

<button class="btn btn-secondary"
        @onclick="AutoIncrement">
  Auto Increment
</button>

@* Using C# lambda functions *@

@* There is no longer the need to wrap the lambda in braces*@

@*<button class="btn btn-primary"
  disabled="@(currentCount > 10)"
  @onclick="() => currentCount++">
  Click me
  </button>*@

@code {
  private int currentCount = 0;
  private int increment = 1;
  private bool shouldPreventDefault = true;
  private DateTime Today { get; set; } = DateTime.Now;

  private void IncrementCount()
  {
    currentCount++;
    // This will output "++" to the browser's console
    Console.WriteLine("++");
  }

  //private void IncrementCount(MouseEventArgs e)
  //{
  //  if (e.CtrlKey)
  //  {
  //    currentCount -= increment;
  //  }
  //  else
  //  {
  //    currentCount += increment;
  //  }
  //}

  private string outerPos = "Nothing yet";
  private void OuterMouseMove(MouseEventArgs e)
   => outerPos = $"Mouse at {e.ClientX}x{e.ClientY}";

  private string innerPos = "Nothing yet";
  private void InnerMouseMove(MouseEventArgs e)
   => innerPos = $"Mouse at {e.ClientX}x{e.ClientY}";

  private void KeyHandler(KeyboardEventArgs e)
  {
    if (e.Key == "+")
    {
      increment += 1;
    }
    else if (e.Key == "-")
    {
      increment -= 1;
    }
  }

  private string BackgroundColor
  => (currentCount % 2 == 0) ? "red-background" : "yellow-background";

  private void AutoIncrement()
  {
    var timer = new System.Threading.Timer(
    callback: (_) =>
    {
      IncrementCount();
      StateHasChanged();
    },
  state:
    null,
  dueTime:
    TimeSpan.FromSeconds(1),
  period:
    TimeSpan.FromSeconds(1));
  }
}
